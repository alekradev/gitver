// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	plumbing "github.com/go-git/go-git/v5/plumbing"
	mock "github.com/stretchr/testify/mock"
)

// ReferenceIter is an autogenerated mock type for the ReferenceIter type
type ReferenceIter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ReferenceIter) Close() {
	_m.Called()
}

// ForEach provides a mock function with given fields: _a0
func (_m *ReferenceIter) ForEach(_a0 func(*plumbing.Reference) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ForEach")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*plumbing.Reference) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *ReferenceIter) Next() (*plumbing.Reference, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func() (*plumbing.Reference, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *plumbing.Reference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReferenceIter creates a new instance of ReferenceIter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReferenceIter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReferenceIter {
	mock := &ReferenceIter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
