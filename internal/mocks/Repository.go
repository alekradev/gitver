// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	git "github.com/go-git/go-git/v5"
	config "github.com/go-git/go-git/v5/config"

	mock "github.com/stretchr/testify/mock"

	object "github.com/go-git/go-git/v5/plumbing/object"

	plumbing "github.com/go-git/go-git/v5/plumbing"

	storer "github.com/go-git/go-git/v5/plumbing/storer"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CommitObject provides a mock function with given fields: hash
func (_m *Repository) CommitObject(hash plumbing.Hash) (*object.Commit, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for CommitObject")
	}

	var r0 *object.Commit
	var r1 error
	if rf, ok := ret.Get(0).(func(plumbing.Hash) (*object.Commit, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(plumbing.Hash) *object.Commit); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func(plumbing.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigScoped provides a mock function with given fields: scope
func (_m *Repository) ConfigScoped(scope config.Scope) (*config.Config, error) {
	ret := _m.Called(scope)

	if len(ret) == 0 {
		panic("no return value specified for ConfigScoped")
	}

	var r0 *config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(config.Scope) (*config.Config, error)); ok {
		return rf(scope)
	}
	if rf, ok := ret.Get(0).(func(config.Scope) *config.Config); ok {
		r0 = rf(scope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(config.Scope) error); ok {
		r1 = rf(scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTag provides a mock function with given fields: name, hash, opts
func (_m *Repository) CreateTag(name string, hash plumbing.Hash, opts *git.CreateTagOptions) (*plumbing.Reference, error) {
	ret := _m.Called(name, hash, opts)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func(string, plumbing.Hash, *git.CreateTagOptions) (*plumbing.Reference, error)); ok {
		return rf(name, hash, opts)
	}
	if rf, ok := ret.Get(0).(func(string, plumbing.Hash, *git.CreateTagOptions) *plumbing.Reference); ok {
		r0 = rf(name, hash, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func(string, plumbing.Hash, *git.CreateTagOptions) error); ok {
		r1 = rf(name, hash, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Head provides a mock function with given fields:
func (_m *Repository) Head() (*plumbing.Reference, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Head")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func() (*plumbing.Reference, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *plumbing.Reference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Log provides a mock function with given fields: o
func (_m *Repository) Log(o *git.LogOptions) (object.CommitIter, error) {
	ret := _m.Called(o)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 object.CommitIter
	var r1 error
	if rf, ok := ret.Get(0).(func(*git.LogOptions) (object.CommitIter, error)); ok {
		return rf(o)
	}
	if rf, ok := ret.Get(0).(func(*git.LogOptions) object.CommitIter); ok {
		r0 = rf(o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(object.CommitIter)
		}
	}

	if rf, ok := ret.Get(1).(func(*git.LogOptions) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: options
func (_m *Repository) Push(options *git.PushOptions) error {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*git.PushOptions) error); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reference provides a mock function with given fields: name, resolved
func (_m *Repository) Reference(name plumbing.ReferenceName, resolved bool) (*plumbing.Reference, error) {
	ret := _m.Called(name, resolved)

	if len(ret) == 0 {
		panic("no return value specified for Reference")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func(plumbing.ReferenceName, bool) (*plumbing.Reference, error)); ok {
		return rf(name, resolved)
	}
	if rf, ok := ret.Get(0).(func(plumbing.ReferenceName, bool) *plumbing.Reference); ok {
		r0 = rf(name, resolved)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func(plumbing.ReferenceName, bool) error); ok {
		r1 = rf(name, resolved)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tag provides a mock function with given fields: name
func (_m *Repository) Tag(name string) (*plumbing.Reference, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 *plumbing.Reference
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*plumbing.Reference, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *plumbing.Reference); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plumbing.Reference)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagObject provides a mock function with given fields: hash
func (_m *Repository) TagObject(hash plumbing.Hash) (*object.Tag, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for TagObject")
	}

	var r0 *object.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(plumbing.Hash) (*object.Tag, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(plumbing.Hash) *object.Tag); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(plumbing.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tags provides a mock function with given fields:
func (_m *Repository) Tags() (storer.ReferenceIter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tags")
	}

	var r0 storer.ReferenceIter
	var r1 error
	if rf, ok := ret.Get(0).(func() (storer.ReferenceIter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() storer.ReferenceIter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storer.ReferenceIter)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Worktree provides a mock function with given fields:
func (_m *Repository) Worktree() (*git.Worktree, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Worktree")
	}

	var r0 *git.Worktree
	var r1 error
	if rf, ok := ret.Get(0).(func() (*git.Worktree, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *git.Worktree); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.Worktree)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
