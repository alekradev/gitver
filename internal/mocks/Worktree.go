// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	git "github.com/go-git/go-git/v5"

	mock "github.com/stretchr/testify/mock"

	plumbing "github.com/go-git/go-git/v5/plumbing"
)

// Worktree is an autogenerated mock type for the Worktree type
type Worktree struct {
	mock.Mock
}

// Add provides a mock function with given fields: pattern
func (_m *Worktree) Add(pattern string) (plumbing.Hash, error) {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 plumbing.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (plumbing.Hash, error)); ok {
		return rf(pattern)
	}
	if rf, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = rf(pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: message, opts
func (_m *Worktree) Commit(message string, opts *git.CommitOptions) (plumbing.Hash, error) {
	ret := _m.Called(message, opts)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 plumbing.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *git.CommitOptions) (plumbing.Hash, error)); ok {
		return rf(message, opts)
	}
	if rf, ok := ret.Get(0).(func(string, *git.CommitOptions) plumbing.Hash); ok {
		r0 = rf(message, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *git.CommitOptions) error); ok {
		r1 = rf(message, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields:
func (_m *Worktree) Status() (git.Status, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 git.Status
	var r1 error
	if rf, ok := ret.Get(0).(func() (git.Status, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() git.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(git.Status)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorktree creates a new instance of Worktree. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorktree(t interface {
	mock.TestingT
	Cleanup(func())
}) *Worktree {
	mock := &Worktree{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
