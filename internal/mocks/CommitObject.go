// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	object "github.com/go-git/go-git/v5/plumbing/object"
	mock "github.com/stretchr/testify/mock"

	plumbing "github.com/go-git/go-git/v5/plumbing"
)

// CommitObject is an autogenerated mock type for the CommitObject type
type CommitObject struct {
	mock.Mock
}

// Committer provides a mock function with given fields:
func (_m *CommitObject) Committer() *object.Signature {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Committer")
	}

	var r0 *object.Signature
	if rf, ok := ret.Get(0).(func() *object.Signature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Signature)
		}
	}

	return r0
}

// Hash provides a mock function with given fields:
func (_m *CommitObject) Hash() plumbing.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 plumbing.Hash
	if rf, ok := ret.Get(0).(func() plumbing.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}

	return r0
}

// NewCommitObject creates a new instance of CommitObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommitObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommitObject {
	mock := &CommitObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
