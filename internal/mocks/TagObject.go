// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	object "github.com/go-git/go-git/v5/plumbing/object"
	mock "github.com/stretchr/testify/mock"
)

// TagObject is an autogenerated mock type for the TagObject type
type TagObject struct {
	mock.Mock
}

// Tagger provides a mock function with given fields:
func (_m *TagObject) Tagger() *object.Signature {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tagger")
	}

	var r0 *object.Signature
	if rf, ok := ret.Get(0).(func() *object.Signature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*object.Signature)
		}
	}

	return r0
}

// NewTagObject creates a new instance of TagObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagObject {
	mock := &TagObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
